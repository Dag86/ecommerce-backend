name: Playwright Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    # Make secrets available to all steps
    env:
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    defaults:
      run:
        working-directory: ecommerce-tests

    steps:
      # Checkout the repo code
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      # Setup Python for FastAPI backend
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Cache pip dependencies for faster builds
      - name: 💾 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: 📦 Install Python dependencies
        run: pip install -r requirements.txt
        working-directory: ecommerce-backend

      # Setup Node.js for Playwright
      - name: 🧰 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Cache npm dependencies
      - name: 💾 Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: 📦 Install Node.js dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      # Start backend in background
      - name: 🚀 Start FastAPI backend
        run: |
          nohup uvicorn main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
        working-directory: ecommerce-backend

      # Wait for backend readiness
      - name: ⏱️ Wait for backend to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://127.0.0.1:8000/products; then
              echo "✅ Backend is up!"
              exit 0
            fi
            echo "⏳ Waiting for backend... ($i/10)"
            sleep 3
          done
          echo "❌ Backend did not start in time" >&2
          cat backend.log || true
          exit 1
        working-directory: ecommerce-backend

      # Output backend logs (always helpful)
      - name: 🪵 Show backend logs
        run: cat backend.log || true
        working-directory: ecommerce-backend

      # Run Playwright tests
      - name: 🧪 Run Playwright tests
        run: npx playwright test --config=playwright.config.ts

      # Upload test report as GitHub artifact
      - name: 📊 Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ecommerce-tests/playwright-report

      # Upload test results (trace/video/screenshot) if tests fail
      - name: 📦 Upload Playwright test artifacts (trace/video/screenshot)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
            name: playwright-artifacts
            path: ecommerce-tests/test-results/
      # Upload backend logs if pipeline fails
      - name: 🪵 Upload backend logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backend-log
          path: ecommerce-backend/backend.log
